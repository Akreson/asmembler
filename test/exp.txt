format ELF64 executable

CONST_NEG equ -1
NAME_C equ 0x4
NAME_C2 equ 1
entry jump_to1

segment readable
NAME_D db 0

segment readable executable
    lea rsi, qword [NAME_D]
    jg jump_to3
    jmp jump_to2
    jmp jump_to1
    mov [rbp-8], eax
    mov dword [rbp-8], NAME_C
    mov qword [rbp-8], NAME_D
    mov byte [rax+rdx+NAME_C+8+1], 3
    mov [r12], rax
    mov [r13], rax
    mov [r13+rax], rax
    mov [rax+r12], rax
    mov [rax+r13], rax
    mov [r12+16], rax
    mov [r13+16], rax
    mov [r13+r12], rax
    mov [r12+r13], rax
;    mov [r12+rax+NAME_D], rax
    mov dword [NAME_D], 0xffffff 
    mov word [r8+r11], 32
jump_to1:
    mov byte [rax+rdx], 200 
    mov word [NAME_D+12], 2134 
    mov word [r8+r11], 322
jump_to4:
    jmp jump_to1
    jmp jump_to4
    mov qword [rax], CONST_NEG
    mov byte [rax+rdx+2], 3
    mov dword [r8+r10*8], 1
    jmp jump_to6
    je jump_to3
jump_to2:
    jmp jump_to6
    mov dword [rax+rcx*2+14], 0xffff 
    mov qword [rax+rdx*4-NAME_C], 0xff
    mov qword [rbx+rdi], 11111111 
jump_to5:
    mov dword [rbp+rax*NAME_C], 0x12345623 
    mov word [rsp+rbp], 0xaaaa 
    mov byte [rdx+rcx*2], 0x2 
    je jump_to6
    mov dword [NAME_D+22], 0x12 
    jl jump_to5
    mov byte [NAME_D-0xffffff], 0xc
    mov dword [rsp+NAME_C], 0xffffffff 
    mov byte [rcx+12], 111 
jump_to6:
    jle jump_to6
    mov byte [rcx-1], 1
    mov byte [rbp+8], 1 
    mov byte [rbp-8], 1 
    mov byte [rsp+123], 1 
    mov byte [NAME_D], 1
jump_to7:
    jmp jump_to2
    mov byte [rbp], 1 
    mov byte [rsp], 1 
    mov byte [r11], 1 
    mov byte [r8], 1 
    mov byte [r9], 1 
    mov rax, NAME_D
    mov eax, CONST_NEG
    mov eax, -1
    mov rax, -1
    mov rax, 2048
    mov r8w, -2
    mov r8d, 123
    mov al, NAME_C 
    mov bx, 30121
    mov esi, 0xFFFFFF
    mov r9b, 34
    mov ax, 16000
    mov edx, 0xFFFFFFFF
    mov esi, 0x1FFFF
jump_to3:
    mov rax, 0x100000000
    mov r9, 123
    ;jle jump_to1
    mov r8w, 9000
    mov r14b, 255
    mov sil, al
    mov bpl, dil
    mov bl, dil
    mov al, bl
    mov bx, cx
    mov esi, edi
    mov r9b, r15b
    mov ax, r8w
    mov edx, r10d
    mov esi, r12d
    mov rax, rcx
    mov r8, rdi
    mov rsp, r10
    mov ax, [NAME_D+12]
    mov eax, [NAME_D-NAME_C]
    mov sil, [rax+rdx]
    mov ah, [rax+rdx]
    mov r12w, [r8+r11]
    mov r10d, [r8+r10*8]
    mov eax, [rax+rcx*2+14]
    mov edx, [rax+rdx*4-NAME_C]
    mov r12, [rbx+rdi]
    mov eax, [rbp+rax*NAME_C]
    mov eax, [rsp+rbp]
    mov al, [rdx+rcx*2]
    mov eax, [NAME_D+22]
    mov eax, [NAME_D-0xffffff]
    mov eax, [rsp+NAME_C]
    mov eax, [rcx+12]
    mov eax, [rcx-1]
    mov eax, [rbp+8]
    mov eax, [rbp-8]
    mov eax, [rsp+123]
    mov eax, [NAME_D]
    mov eax, [rbp]
    mov eax, [rsp]
    mov eax, [r8]
    mov r8, [r9]
    mov [NAME_D+12], ax 
    mov [NAME_D-NAME_C], eax 
    mov [rax+rdx], sil 
    mov [rax+rdx], ah 
    mov [r8+r11], r12w
    mov [r8+r10*8], r10d 
    mov [rax+rcx*2+14], eax 
    mov [rax+rdx*4-NAME_C], edx 
    mov [rbx+rdi], r12 
    mov [rbp+rax*NAME_C], eax 
    mov [rsp+rbp], eax 
    mov [rdx+rcx*2], al 
    mov [NAME_D+22], eax 
    mov [NAME_D-0xffffff], eax 
    mov [rsp+NAME_C], eax 
    mov [rcx+12], eax 
    mov [rcx-1], eax 
    mov [rbp+8], eax 
    mov [rbp-8], eax 
    mov [rsp+123], eax 
    mov [NAME_D], eax 
    mov [rbp], eax 
    mov [rsp], eax 
    mov [r11], r10b 
    mov [r8], eax 
    mov [r9], r8

    jmp _err_dubl_entry
_err_macro_arg_rep:
    mov rsi, NAME_D
    jmp _err_start_parser
_err_macro_to_many_arg:
    mov rsi, NAME_D
    jmp _err_start_parser
_err_invalid_command_in_macr_def:
    mov rsi, NAME_D
    jmp _err_start_parser
_err_segment_not_set:
    mov rsi, NAME_D
    jmp _err_start_parser
_err_out_of_range_value:
    mov rsi, NAME_D
    jmp _err_start_parser
_err_invalid_const_value:
    mov rsi, NAME_D
    jmp _err_start_parser
_err_defined_symbol:
    mov rsi, NAME_D
    jmp _err_start_parser
_err_invalid_addr_expr:
    mov rsi, NAME_D
    jmp _err_start_parser
_err_invalid_expr:
    mov rsi, NAME_D
    jmp _err_start_parser
_err_def_ext:
    mov rsi, NAME_D
    jmp _err_start_parser
_err_def_pub:
    mov rsi, NAME_D
    jmp _err_start_parser
_err_def_mod_def:
    mov rsi, NAME_D
    jmp _err_start_parser
_err_def_ext_before:
    mov rsi, NAME_D
    jmp _err_start_parser
_err_dubl_entry:
    mov rsi, NAME_D
    jmp _err_start_parser
_err_str_reg_val:
    mov rsi, NAME_D
    jmp _err_start_parser
_err_seg_inv_def:
    mov rsi, NAME_D
_err_start_parser:
    mov edi, [rbp-52]
    xor rdx, rdx
    xor ecx, ecx
    mov r9, -4
_end_start_parser:
    add rsp, 256
    pop rbp
    ret

